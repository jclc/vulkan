// The autogenerated code is released under Public Domain.

// WARNING: This file has automatically been generated on Tue, 16 Oct 2018 02:42:19 EEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package vma

/*
#cgo CFLAGS: -I.. -DVK_NO_PROTOTYPES
#include "../vulkan/vulkan.h"
#include "vk_mem_alloc.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// Allocator as declared in vma/vk_mem_alloc.h:1503
type Allocator C.VmaAllocator

// DeviceMemoryCallbacks as declared in vma/vk_mem_alloc.h:1530
type DeviceMemoryCallbacks struct {
	pfnAllocate    PFN_vmaAllocateDeviceMemoryFunction
	pfnFree        PFN_vmaFreeDeviceMemoryFunction
	refd4225bbd    *C.VmaDeviceMemoryCallbacks
	allocsd4225bbd interface{}
}

// AllocatorCreateFlags type as declared in vma/vk_mem_alloc.h:1564
type AllocatorCreateFlags uint32

// VulkanFunctions as declared in vma/vk_mem_alloc.h:1591
type VulkanFunctions struct {
	vkGetPhysicalDeviceProperties       PFN_vkGetPhysicalDeviceProperties
	vkGetPhysicalDeviceMemoryProperties PFN_vkGetPhysicalDeviceMemoryProperties
	vkAllocateMemory                    PFN_vkAllocateMemory
	vkFreeMemory                        PFN_vkFreeMemory
	vkMapMemory                         PFN_vkMapMemory
	vkUnmapMemory                       PFN_vkUnmapMemory
	vkFlushMappedMemoryRanges           PFN_vkFlushMappedMemoryRanges
	vkInvalidateMappedMemoryRanges      PFN_vkInvalidateMappedMemoryRanges
	vkBindBufferMemory                  PFN_vkBindBufferMemory
	vkBindImageMemory                   PFN_vkBindImageMemory
	vkGetBufferMemoryRequirements       PFN_vkGetBufferMemoryRequirements
	vkGetImageMemoryRequirements        PFN_vkGetImageMemoryRequirements
	vkCreateBuffer                      PFN_vkCreateBuffer
	vkDestroyBuffer                     PFN_vkDestroyBuffer
	vkCreateImage                       PFN_vkCreateImage
	vkDestroyImage                      PFN_vkDestroyImage
	vkGetBufferMemoryRequirements2KHR   PFN_vkGetBufferMemoryRequirements2KHR
	vkGetImageMemoryRequirements2KHR    PFN_vkGetImageMemoryRequirements2KHR
	ref7d3d37cb                         *C.VmaVulkanFunctions
	allocs7d3d37cb                      interface{}
}

// RecordFlags type as declared in vma/vk_mem_alloc.h:1604
type RecordFlags uint32

// RecordSettings as declared in vma/vk_mem_alloc.h:1619
type RecordSettings struct {
	flags          RecordFlags
	pFilePath      string
	ref2c79c965    *C.VmaRecordSettings
	allocs2c79c965 interface{}
}

// AllocatorCreateInfo as declared in vma/vk_mem_alloc.h:1698
type AllocatorCreateInfo struct {
	flags                       AllocatorCreateFlags
	preferredLargeHeapBlockSize uint
	pDeviceMemoryCallbacks      []DeviceMemoryCallbacks
	frameInUseCount             uint32
	pHeapSizeLimit              []uint
	pVulkanFunctions            []VulkanFunctions
	pRecordSettings             []RecordSettings
	ref59aca072                 *C.VmaAllocatorCreateInfo
	allocs59aca072              interface{}
}

// StatInfo as declared in vma/vk_mem_alloc.h:1764
type StatInfo struct {
	blockCount         uint32
	allocationCount    uint32
	unusedRangeCount   uint32
	usedBytes          uint
	unusedBytes        uint
	allocationSizeMin  uint
	allocationSizeAvg  uint
	allocationSizeMax  uint
	unusedRangeSizeMin uint
	unusedRangeSizeAvg uint
	unusedRangeSizeMax uint
	refd2066734        *C.VmaStatInfo
	allocsd2066734     interface{}
}

// Stats as declared in vma/vk_mem_alloc.h:1772
type Stats struct {
	memoryType     [32]StatInfo
	memoryHeap     [16]StatInfo
	total          StatInfo
	ref8f066b41    *C.VmaStats
	allocs8f066b41 interface{}
}

// Pool as declared in vma/vk_mem_alloc.h:1805
type Pool C.VmaPool

// AllocationCreateFlags type as declared in vma/vk_mem_alloc.h:1961
type AllocationCreateFlags uint32

// AllocationCreateInfo as declared in vma/vk_mem_alloc.h:2004
type AllocationCreateInfo struct {
	flags          AllocationCreateFlags
	usage          MemoryUsage
	requiredFlags  uint32
	preferredFlags uint32
	memoryTypeBits uint32
	pool           Pool
	pUserData      unsafe.Pointer
	ref1eb4cb8b    *C.VmaAllocationCreateInfo
	allocs1eb4cb8b interface{}
}

// PoolCreateFlags type as declared in vma/vk_mem_alloc.h:2121
type PoolCreateFlags uint32

// PoolCreateInfo as declared in vma/vk_mem_alloc.h:2168
type PoolCreateInfo struct {
	memoryTypeIndex uint32
	flags           PoolCreateFlags
	blockSize       uint
	minBlockCount   uint
	maxBlockCount   uint
	frameInUseCount uint32
	ref740e9078     *C.VmaPoolCreateInfo
	allocs740e9078  interface{}
}

// PoolStats as declared in vma/vk_mem_alloc.h:2195
type PoolStats struct {
	size               uint
	unusedSize         uint
	allocationCount    uint
	unusedRangeCount   uint
	unusedRangeSizeMax uint
	blockCount         uint
	ref2403320d        *C.VmaPoolStats
	allocs2403320d     interface{}
}

// Allocation as declared in vma/vk_mem_alloc.h:2276
type Allocation C.VmaAllocation

// AllocationInfo as declared in vma/vk_mem_alloc.h:2319
type AllocationInfo struct {
	memoryType     uint32
	offset         uint
	size           uint
	pMappedData    unsafe.Pointer
	pUserData      unsafe.Pointer
	ref9b2a54a2    *C.VmaAllocationInfo
	allocs9b2a54a2 interface{}
}

// DefragmentationInfo as declared in vma/vk_mem_alloc.h:2540
type DefragmentationInfo struct {
	maxBytesToMove       uint
	maxAllocationsToMove uint32
	refed3425ad          *C.VmaDefragmentationInfo
	allocsed3425ad       interface{}
}

// DefragmentationStats as declared in vma/vk_mem_alloc.h:2552
type DefragmentationStats struct {
	bytesMoved              uint
	bytesFreed              uint
	allocationsMoved        uint32
	deviceMemoryBlocksFreed uint32
	refa09c1bc              *C.VmaDefragmentationStats
	allocsa09c1bc           interface{}
}
